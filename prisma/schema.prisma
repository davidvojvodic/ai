// Specify the Prisma client provider to generate a JavaScript client to interact with the database.
generator client {
  provider = "prisma-client-js"
}

// Define the database configuration for connecting to a MySQL database.
datasource db {
  provider     = "mysql" // Use MySQL as the database provider.
  url          = env("DATABASE_URL") // Read the database connection URL from environment variables.
  relationMode = "prisma" // Set the relation mode to "prisma".
}

model User {
  id    String @id @unique
  email String @unique

  File    File[]
  Message Message[]
}

// Define the data model for the "UserApiLimit" table in the database.
model UserApiLimit {
  id        String   @id @default(cuid()) // Define the "id" field as the primary key with a default value generated using cuid().
  userId    String   @unique // Define the "userId" field as a unique identifier for each user.
  count     Int      @default(0) // Define the "count" field as an integer with a default value of 0.
  createdAt DateTime @default(now()) // Define the "createdAt" field as a DateTime with a default value set to the current timestamp.
  updatedAt DateTime @updatedAt // Define the "updatedAt" field as a DateTime that automatically updates when the record is modified.
}

// Define the data model for the "UserSubscription" table in the database.
model UserSubscription {
  id                     String    @id @default(cuid()) // Define the "id" field as the primary key with a default value generated using cuid().
  userId                 String    @unique // Define the "userId" field as a unique identifier for each user.
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id") // Define the "stripeCustomerId" field as an optional string with an optional unique constraint and mapped to the database column "stripe_customer_id".
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id") // Define the "stripeSubscriptionId" field as an optional string with an optional unique constraint and mapped to the database column "stripe_subscription_id".
  stripePriceId          String?   @map(name: "stripe_price_id") // Define the "stripePriceId" field as an optional string mapped to the database column "stripe_price_id".
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end") // Define the "stripeCurrentPeriodEnd" field as an optional DateTime mapped to the database column "stripe_current_period_end".
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(uuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([userId])
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([fileId])
  @@index([userId])
}
